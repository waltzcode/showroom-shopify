var Constants = {
  sessionParam: 'showroomSId',
  registerSessionURL: 'http://services.showroomapp.net/session/register',
  serviceBundleId: 'showroom.ios',
  serviceVersion: '1.0.8',
  getFeaturedFeedURL: 'http://services.showroomapp.net/feed/featured/0/15/',
  getPopularFeedURL: 'http://services.showroomapp.net/feed/most/like/0/15/',
  getNewestFeedURL: 'http://services.showroomapp.net/feed/latest/0/15/',
  showroomCDN: 'http://cdn.showroomapp.tv/'
};

var app = angular.module('myApp', [
  "ngCookies",
  "ngSanitize",
  "com.2fdevs.videogular",
  "com.2fdevs.videogular.plugins.poster"
]);

app.config(function ($interpolateProvider) {
  $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
});

app.config(function ($sceProvider) {
  $sceProvider.enabled(false);
});

app.filter('jsonParse', function() {
  return function(input) {
    return angular.isObject(input) ? input : JSON.parse(input);
  };
});

app.filter('productLink', function() {
  return function(link) {
    if (link.indexOf('showroom-store.myshopify.com') == -1 && link.indexOf('amazon.com') == -1) {
      return '/pages/ext-product?url='+link;
    }
    return link;
  };
});

app.filter('productTarget', function() {
  return function(link) {
    if (link.indexOf('amazon.com') == -1) {
      return '_self';
    }
    return '_blank';
  };
});

app.filter('excerptTitle', function() {
  return function(input, length, excerpt_more) {
    if (input.length > length) {
      input = input.substring(0, length);
      input = input.substring(0, input.lastIndexOf(' ') + 1);
      input += excerpt_more;
    }

    return input;
  };
});

app.factory('CheckSessionId', function($cookies, $http, $q) {
  var deferred = $q.defer();
  var sessionId = $cookies.get(Constants.sessionParam);
  var now = new Date();
  var exp = new Date(now.getTime() + 40*50*1000);
  var data = {
    deviceId: '',
    model: '',
    name: '',
    osName: '',
    osVersion: '',
    bundleId: Constants.serviceBundleId,
    bundleVersion: Constants.serviceVersion,
    langCode: ''
  };

  if (sessionId) {
    $cookies.put(Constants.sessionParam, sessionId, {
      expires: exp
    });
    deferred.resolve(sessionId);
  } else {
    $http({
      url: Constants.registerSessionURL,
      method: 'POST',
      data: data
    })
    .success(function(response) {
      sessionId = response.payload.sessionId;
      if (response.code == 1000) {

        $cookies.put(Constants.sessionParam, response.payload.sessionId, {
          expires: exp
        });
      	deferred.resolve(response.payload.sessionId);
      } else {
        deferred.reject('Error when register session');
      }

    })
    .error(function(data) {
      deferred.reject(data);
    });
  }

  return deferred.promise;
});

app.controller('myCtrl', [
  "$scope","$http","CheckSessionId", "$sce","VG_STATES", "$filter",
  function($scope, $http, CheckSessionId, $sce, VG_STATES, $filter) {

  $scope.cdn = Constants.showroomCDN;
  $scope.theme = '';
  $scope.currentAPI = null;

  $scope.buildVideos = function(config) {
    var instance = this;
    instance.response = config.response;
    instance.currencySymbol = config.currencySymbol || '$';
    instance.exceprtTitleLength = config.exceprtTitleLength || 30;
    instance.excerptMore = config.excerptMore || '...';
    instance.videoSize = config.videoSize || '400';
    instance.thumbnailSize = config.thumbnailSize || '700';

    if (instance.response.code == 1000) { // Check if request is correctu
      var shows = instance.response.payload.listShows;
      var products = instance.response.payload.listProducts;
      var videos = [];

      var productPrice, productName, productTitle, productMetaData;

      angular.forEach(shows, function(show, index) {

        productPrice = $filter('currency')(products[index].price, instance.currencySymbol, 2);
        productTitle = products[index].name;
        productName = $filter('excerptTitle')(products[index].name, instance.exceprtTitleLength, instance.excerptMore);
        productMetaData = $filter('jsonParse')(products[index].metaData);

        videos[index] = {
          preload: 'none',
            sources: [
              {
                src: $sce.trustAsResourceUrl($scope.cdn + shows[index].videoSets[instance.videoSize]),
                type: 'video/mp4'
              }
            ],
            poster: $sce.trustAsResourceUrl($scope.cdn + shows[index].thumbnailSets[instance.thumbnailSize]),
            onPlayerReady: function($API) {
              var instance = this;
              instance.API = $API;
            },
            play: function() {
              var instance = this;
              if ($scope.currentAPI && $scope.currentAPI.currentState == VG_STATES.PLAY) {
                $scope.currentAPI.stop();
              }
              if (instance.API && instance.API.currentState != VG_STATES.PLAY) {
                $scope.currentAPI = instance.API;
                instance.API.play();
              }
            },
            likeCounter: shows[index].likeCounter,
            viewCounter: shows[index].viewCounter,
            commentCounter: shows[index].commentCounter,
            shareCounter: shows[index].shareCounter,
            productName: productName,
            productTitle: productTitle,
            price: productPrice,
            productLinkUrl: $filter('productLink')(productMetaData.url),
            productLinkTarget: $filter('productTarget')(productMetaData.url)
        }; // end videos[index]
      }); // end angular.forEach
      return videos;
    } // endif
  };

  CheckSessionId
  .then(function(sessionId) {
    var featuredUrl = Constants.getFeaturedFeedURL + sessionId;
    var popularUrl = Constants.getPopularFeedURL + sessionId;
    var newestUrl = Constants.getNewestFeedURL + sessionId;

    // Featured shows
    $http.get(featuredUrl).success(function(response) {$scope.featuredVideos = $scope.buildVideos({response: response});}) .error(function(data) {console.error(data); });
    // Popular shows
    $http.get(popularUrl).success(function(response) {$scope.popularVideos = $scope.buildVideos({response: response}); }) .error(function(data) {console.error(data); });
    // Newest shows
    $http.get(newestUrl).success(function(response) {$scope.newestVideos = $scope.buildVideos({response: response}); }) .error(function(data) {console.error(data); });
  }, function(error) {
    console.error("Deo lay duoc sessionId, error: " + error);
  });
}]);
